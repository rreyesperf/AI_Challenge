name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: your-registry.azurecr.io
  IMAGE_NAME: agentic-rag-api
  RESOURCE_GROUP: your-resource-group
  CONTAINER_APP_NAME: agentic-rag-api
  CONTAINER_APP_ENV: your-container-apps-environment

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml || echo "No tests found, skipping"
        
    - name: Test Flask app startup
      run: |
        export FLASK_ENV=development
        python -c "from routes import create_app; app = create_app(); print('Flask app created successfully')"
        
  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure Container Apps
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ env.CONTAINER_APP_NAME }}
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        imageToDeploy: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        environmentVariables: |
          FLASK_ENV=production
          SECRET_KEY=secretref:secret-key
          OPENAI_API_KEY=secretref:openai-api-key
          ANTHROPIC_API_KEY=secretref:anthropic-api-key
          GOOGLE_API_KEY=secretref:google-api-key
          AZURE_OPENAI_API_KEY=secretref:azure-openai-api-key
          AZURE_OPENAI_ENDPOINT=secretref:azure-openai-endpoint
          APP_INSIGHTS_INSTRUMENTATION_KEY=secretref:app-insights-key
          
  validate-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
        
    - name: Wait for deployment
      run: sleep 60
      
    - name: Run deployment validation tests
      run: |
        python test_deployment.py --url https://${{ env.CONTAINER_APP_NAME }}.nice-ground-12345.eastus2.azurecontainerapps.io
      env:
        DEPLOYMENT_URL: https://${{ env.CONTAINER_APP_NAME }}.nice-ground-12345.eastus2.azurecontainerapps.io
        
    - name: Notify on success
      if: success()
      run: |
        echo "üéâ Deployment successful and validated!"
        echo "API is available at: https://${{ env.CONTAINER_APP_NAME }}.nice-ground-12345.eastus2.azurecontainerapps.io"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Deployment validation failed!"
        echo "Check the logs and Container Apps status in Azure Portal"
