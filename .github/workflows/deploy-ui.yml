name: Deploy UI to Azure Container Apps

on:
  push:
    branches: [ main, production ]
    paths:
      - 'app/UI/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/UI/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  AZURE_CONTAINER_REGISTRY: cr81aichallenge-hed7gqfvbbcub6az.azurecr.io
  IMAGE_NAME: travel-chat-ui
  CONTAINER_APP_NAME: travel-chat-ui-app
  RESOURCE_GROUP_NAME: rg_grupo81
  CONTAINER_APP_ENV: travel-chat-env

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📦 Install dependencies
      working-directory: ./app/UI
      run: |
        npm ci --silent

    - name: 🔍 Lint code
      working-directory: ./app/UI
      run: |
        npm run lint || echo "⚠️ Linting warnings found, continuing..."

    - name: 🧪 Run tests
      working-directory: ./app/UI
      run: |
        npm test -- --coverage --watchAll=false || echo "⚠️ Some tests failed, continuing..."

    - name: 🏗️ Build React app
      working-directory: ./app/UI
      run: |
        npm run build
        
    - name: 📂 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ui-build
        path: app/UI/build/
        retention-days: 1

  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./app/UI
        file: ./app/UI/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          REACT_APP_AUTH_USERNAME=${{ secrets.UI_AUTH_USERNAME }}
          REACT_APP_AUTH_PASSWORD=${{ secrets.UI_AUTH_PASSWORD }}
          REACT_APP_API_URL=https://travel-chat-api-app.redwater-9f43b1af.eastus.azurecontainerapps.io
        
    - name: 📋 Image build summary
      run: |
        echo "🐳 UI Docker image built and pushed successfully!"
        echo "Registry: ${{ env.AZURE_CONTAINER_REGISTRY }}"
        echo "Image: ${{ env.IMAGE_NAME }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 🔍 Check Container Apps Environment
      id: check-env
      run: |
        echo "🔍 Checking if Container Apps Environment exists..."
        ENV_EXISTS=$(az containerapp env show --name ${{ env.CONTAINER_APP_ENV }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "name" -o tsv 2>/dev/null || echo "not-found")
        if [ "$ENV_EXISTS" = "not-found" ]; then
          echo "⚠️ Container Apps Environment '${{ env.CONTAINER_APP_ENV }}' not found"
          echo "🏗️ Creating Container Apps Environment..."
          az containerapp env create \
            --name ${{ env.CONTAINER_APP_ENV }} \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --location $(az group show --name ${{ env.RESOURCE_GROUP_NAME }} --query location -o tsv)
          echo "✅ Container Apps Environment created successfully!"
        else
          echo "✅ Container Apps Environment '${{ env.CONTAINER_APP_ENV }}' found!"
        fi
        
    - name: 🚀 Deploy to Azure Container Apps
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ env.CONTAINER_APP_NAME }}
        resourceGroup: ${{ env.RESOURCE_GROUP_NAME }}
        containerAppEnvironment: ${{ env.CONTAINER_APP_ENV }}
        imageToDeploy: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        targetPort: 80
        ingress: external
        environmentVariables: |
          NODE_ENV=production
          
    - name: 🌐 Get Container App URL
      id: get-url
      run: |
        APP_URL=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "properties.configuration.ingress.fqdn" -o tsv)
        echo "APP_URL=https://$APP_URL" >> $GITHUB_OUTPUT
        echo "🌐 UI Application URL: https://$APP_URL"
        
    - name: 📋 Deployment Summary
      run: |
        echo "🚀 UI Deployment completed successfully!"
        echo "📦 Image: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "🌐 UI Application URL: ${{ steps.get-url.outputs.APP_URL }}"
        echo "📊 Resource Group: ${{ env.RESOURCE_GROUP_NAME }}"
        echo "🏗️ Container App: ${{ env.CONTAINER_APP_NAME }}"

  validate-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 🌐 Get Container App URL
      id: get-url
      run: |
        APP_URL=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "properties.configuration.ingress.fqdn" -o tsv)
        echo "APP_URL=https://$APP_URL" >> $GITHUB_OUTPUT
        
    - name: ⏳ Wait for deployment to stabilize
      run: |
        echo "⏳ Waiting for UI deployment to stabilize..."
        sleep 60
      
    - name: 🏥 Health Check
      run: |
        echo "🏥 Running UI health check..."
        # Check if the main page loads
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.get-url.outputs.APP_URL }}")
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "✅ UI health check passed! (HTTP $HTTP_STATUS)"
        else
          echo "❌ UI health check failed! (HTTP $HTTP_STATUS)"
          exit 1
        fi
        
    - name: 🧪 UI Functionality Test
      run: |
        echo "🧪 Testing UI functionality..."
        
        # Test main page
        curl -f "${{ steps.get-url.outputs.APP_URL }}"
        
        # Check for React app artifacts
        RESPONSE=$(curl -s "${{ steps.get-url.outputs.APP_URL }}")
        if echo "$RESPONSE" | grep -q "react\|React"; then
          echo "✅ React application detected!"
        else
          echo "⚠️ React application not clearly detected, but page loads"
        fi
        
        echo "✅ UI functionality tests completed!"
        
    - name: 🎉 Notify on success
      if: success()
      run: |
        echo "🎉 UI Deployment successful and validated!"
        echo "🌐 UI is available at: ${{ steps.get-url.outputs.APP_URL }}"
        echo "✨ Users can now access the Travel Chat UI"
        
    - name: ❌ Notify on failure
      if: failure()
      run: |
        echo "❌ UI Deployment validation failed!"
        echo "🔍 Check the logs and Container Apps status in Azure Portal"
        echo "🌐 Expected URL: ${{ steps.get-url.outputs.APP_URL }}"
        exit 1
